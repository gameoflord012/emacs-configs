* Initialize
** load-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/loadpath")
#+END_SRC

** misc
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))

  (setq scroll-conservatively 100)
  (setq ring-bell-fufnction 'ignore)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq inhibit-start-up-message t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq ring-bell-function 'ignore)
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Misc
* IDO
** enable ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex(M-x completion)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x". smex))
#+END_SRC

** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Buffers
** kill buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") `config-visit)
#+END_SRC

** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (save-buffer "config.org")
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Window
** maximize
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** switch window
*** switch when create new window
#+BEGIN_SRC emacs-lisp
  (defun my-split-window-vertically()
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (defun my-split-window-horizontally()
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (keymap-global-unset "C-x 3")
  (keymap-global-unset "C-x 2")

  (keymap-global-set "C-x 2" 'my-split-window-vertically)
  (keymap-global-set "C-x 3" 'my-split-window-horizontally)
#+END_SRC


*** switch with multiple windows
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-edit-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** org window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

* Editor
** electric-pair
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list)
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC

** line number
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** rainbow-delimiter
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (
	   (c-mode . lsp)
	   (c++-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    )

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+END_SRC

** hungry-delete
#+begin_src  emacs-lisp
  (use-package hungry-delete
    :ensure t
    :bind (("C-c DEL" . hungry-delete-backward))
  )
#+end_src

** ivy + counsel
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  (use-package counsel
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
#+END_SRC

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    (add-hook 'org-mode-hook #'yas-minor-mode))
  
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
* Debug
** dap-mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t)

  (with-eval-after-load 'lsp-mode
    (require 'dap-cpptools))
#+END_SRC
* CMake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
#+END_SRC
* Appearance
** Dashboard
#+BEGIN_SRC emacs-lisp   
  (use-package dashboard     
    :ensure t     
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-item '((recents . 10)))
    (setq dashboard-banner-logo-title "Gru")) 
#+END_SRC
** Org Bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
