* Initialize
** defalias
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** load-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/loadpath")
#+END_SRC

** misc
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))

  (setq scroll-conservatively 100)
  (setq ring-bell-fufnction 'ignore)
  (setq inhibit-start-up-message t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; winner-mode: use for undo and redo cursor position
  (winner-mode 1)
  (define-key winner-mode-map (kbd "C-c [") 'winner-undo)
  (define-key winner-mode-map (kbd "C-c ]") 'winner-redo)

  ;; Disable ring bell
  (setq ring-bell-function 'ignore)

  ;; Auto save
  (setq backup-directory-alist '((".*" . "~/.emacs.d/.emacs_backups")))

#+END_SRC

** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") `config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (save-buffer "config.org")
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp
  ;; (use-package moody
  ;;   :ensure t
  ;;   :config
  ;;   (moody-replace-mode-line-front-space)
  ;;   (moody-replace-mode-line-buffer-identification)
  ;;   (moody-replace-vc-mode))

  ;; (set-face-attribute 'mode-line nil :box nil)
  ;; (set-face-attribute 'mode-line-inactive nil :box nil)

  ;; (set-face-attribute 'mode-line nil :overline "blue")
  ;; (set-face-attribute 'mode-line nil :underline `(:color "blue" :position t))

  ;; (set-face-attribute 'mode-line-inactive nil :overline "green")
  ;; (set-face-attribute 'mode-line-inactive nil :underline `(:color "green" :position t))

  ;; (use-package minions
  ;;   :ensure t
  ;;   :config
  ;;   (keymap-global-set "<S-down-mouse-3>" #'minions-minor-modes-menu))
#+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'eshell)
#+END_SRC
* Window and Buffer
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-expert t)
  (global-set-key  (kbd "C-x C-b") 'counsel-switch-buffer)
#+END_SRC

** kill buffer and window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c k") 'kill-buffer-and-window)
  (keymap-global-set "C-x k" 'kill-this-buffer)
#+END_SRC

** maximize
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** switch window
*** switch when create new window
#+BEGIN_SRC emacs-lisp
  (defun my-split-window-vertically()
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (defun my-split-window-horizontally()
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (keymap-global-unset "C-x 3")
  (keymap-global-unset "C-x 2")

  (keymap-global-set "C-x 2" 'my-split-window-vertically)
  (keymap-global-set "C-x 3" 'my-split-window-horizontally)
#+END_SRC

*** switch with multiple windows
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-edit-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 3)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** org window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

* Editor
** scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure
    :config
    (smooth-scrolling-mode 1))
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-minimum-prefix-length 2)
    (global-company-mode))
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) "))

#+END_SRC

*** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (counsel-mode t))

  (global-set-key "\C-s" 'swiper)
#+END_SRC

*** pos-frame
#+BEGIN_SRC emacs-lisp
  (use-package ivy-posframe
    :ensure t
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    (ivy-posframe-mode 1))

  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
  ;; (ivy-posframe-mode 1)
#+END_SRC


** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** electric-pair
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** line number
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
  (global-display-line-numbers-mode)
#+END_SRC
** rainbow-delimiter
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC

** hungry-delete
#+begin_src  emacs-lisp
  (use-package hungry-delete
    :ensure t
    :bind (("C-c DEL" . hungry-delete-backward)
	   ("C-c d" . hungry-delete-forward)))
#+end_src

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    (add-hook 'org-mode-hook #'yas-minor-mode))
  
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

* Project
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC

* Language
** cmake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
#+END_SRC

* Appearance
** Dashboard
#+BEGIN_SRC emacs-lisp   
  (use-package dashboard     
    :ensure t     
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-item '((recents . 10)))
    (setq dashboard-banner-logo-title "DogShit")
    (setq dashboard-startup-banner "~/.emacs.d/banners/dogshit.txt"))
#+END_SRC
** Org Bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
